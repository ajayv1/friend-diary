{"version":3,"sources":["component/search-box/search-box.component.jsx","component/card/card.component.jsx","component/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","friend","id","name","email","CardList","friends","map","key","App","state","searchFields","fetch","then","response","json","users","setState","this","filteredFriends","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAEaA,G,YAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OAAO,2BACLC,UAAU,SACVC,KAAK,SACLH,YAAeA,EACfI,SAAaH,MCLJI,G,YAAO,SAACC,GACnB,OAAO,yBAAKJ,UAAU,kBACpB,yBACEK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,OAAOC,GAAvC,4BAEL,4BAAMJ,EAAMG,OAAOE,KAAnB,KACA,2BAAKL,EAAMG,OAAOG,UCNTC,EAAW,SAAAP,GACtB,OAAO,yBAAKJ,UAAU,aAElBI,EAAMQ,QAAQC,KAAI,SAACN,GAAD,OAAY,kBAAC,EAAD,CAAMO,IAAMP,EAAOC,GAAID,OAASA,SCwCrDQ,E,YAtCb,aAAgB,IAAD,8BACb,+CACKC,MAAQ,CACXJ,QAAS,GACTK,aAAc,IAJH,E,iFAQM,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEX,QAASU,S,+BAGlC,IAAD,SAC2BE,KAAKR,MAA/BJ,EADD,EACCA,QAASK,EADV,EACUA,aACXQ,EAAkBb,EAAQc,QAAO,SAAAnB,GAAM,OACzCA,EAAOE,KAAKkB,cAAcC,SAASX,EAAaU,kBAGpD,OACE,yBAAK3B,UAAU,OACb,4CACA,kBAAC,EAAD,CACEF,YAAY,iBACZC,aACE,SAAA8B,GACE,EAAKN,SAAS,CAACN,aAAcY,EAAEC,OAAOC,WAI5C,kBAAC,EAAD,CAAUnB,QAASa,S,GAjCTO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.3d6673f4.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.styles.css';\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return <input \n    className=\"search\"\n    type=\"search\" \n    placeholder= { placeholder }\n    onChange = { handleChange }\n  />\n};","import React from 'react';\nimport './card.styles.css';\nexport const Card = (props) => {\n  return <div className=\"card-container\">\n    <img \n      alt=\"friends\"\n      src={`https://robohash.org/${props.friend.id}?set=set5&size=180x180`}>\n    </img>\n    <h2>{ props.friend.name } </h2>\n    <p>{ props.friend.email }</p>\n  </div>\n}; ","import React from 'react'\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\nexport const CardList = props => {\n  return <div className=\"card-list\">\n    {\n      props.friends.map((friend) => <Card key={ friend.id} friend={ friend }></Card>)\n    } \n  </div>;\n} ","import React, { Component } from 'react';\nimport './App.css';\n\nimport { SearchBox } from './component/search-box/search-box.component';\nimport { CardList } from './component/card-list/card-list.component';\n\nclass App extends Component {\n\n  constructor () {\n    super();\n    this.state = {\n      friends: [],\n      searchFields: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((users) => this.setState({ friends: users}))\n  }\n\n  render() {\n    const { friends, searchFields } = this.state;\n    const filteredFriends = friends.filter(friend => \n        friend.name.toLowerCase().includes(searchFields.toLowerCase())\n      );\n\n    return (  \n      <div className=\"App\">\n        <h1>Friend Diary</h1>\n        <SearchBox \n          placeholder=\"search friends\" \n          handleChange = {\n            e => {\n              this.setState({searchFields: e.target.value})\n            } \n          }\n        ></SearchBox>\n        <CardList friends={filteredFriends}></CardList> \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}